package main

import (
	"flag"
	"fmt"

	"google.golang.org/protobuf/compiler/protogen"
)

func main() {
	flag.Parse()
	protogen.Options{}.Run(func(gen *protogen.Plugin) error {
		for _, f := range gen.Files {
			if !f.Generate {
				continue
			}
			generateFile(gen, f)
		}
		return nil
	})
}

func svcName(svc *protogen.Service) string {
	return "mock" + svc.GoName
}

func getMarshalPkg(g *protogen.GeneratedFile) string {
	return g.QualifiedGoIdent(
		protogen.GoIdent{
			GoName:       "Marshal",
			GoImportPath: protogen.GoImportPath("encoding/json"),
		},
	)
}

func getUnmarshalPkg(g *protogen.GeneratedFile) string {
	return g.QualifiedGoIdent(
		protogen.GoIdent{
			GoName:       "Unmarshal",
			GoImportPath: protogen.GoImportPath("encoding/json"),
		},
	)
}

func getMockServer(g *protogen.GeneratedFile) string {
	return g.QualifiedGoIdent(
		protogen.GoIdent{
			GoName:       "MockServer",
			GoImportPath: protogen.GoImportPath("github.com/ankurs/grpc-mock/mocker"),
		},
	)
}

func getCtx(g *protogen.GeneratedFile) string {
	return g.QualifiedGoIdent(
		protogen.GoIdent{
			GoName:       "Context",
			GoImportPath: protogen.GoImportPath("context"),
		},
	)
}

func generateFile(gen *protogen.Plugin, file *protogen.File) {

	if len(file.Services) == 0 {
		return
	}

	filename := file.GeneratedFilenamePrefix + ".mock.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-grpc-mock. DO NOT EDIT.")
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()

	for _, svc := range file.Services {
		if len(svc.Methods) == 0 {
			continue
		}
		g.P("// ", svc.GoName)
		sName := svcName(svc)
		g.P("type ", sName, " struct {")
		g.P(getMockServer(g), " // embedding mock server interface")
		g.P("}")
		g.P()
		for _, m := range svc.Methods {
			ctx := getCtx(g)
			g.P("// method -- ", m.GoName)
			input := g.QualifiedGoIdent(m.Input.GoIdent)
			output := g.QualifiedGoIdent(m.Output.GoIdent)
			if m.Desc.IsStreamingClient() || m.Desc.IsStreamingServer() {
				g.P(fmt.Sprintf("func (m *%s) %s(_ %s_%sServer) error {", sName, m.GoName, svc.GoName, m.GoName))
				g.P("return nil")
				g.P("}")
				continue
			}
			g.P(fmt.Sprintf("func (m *%s) %s(ctx %s, input *%s) (*%s, error) {", sName, m.GoName, ctx, input, output))
			mar := getMarshalPkg(g)
			g.P("req, err := ", mar, "(input)")
			g.P("if err != nil { return nil, err}")
			g.P(fmt.Sprintf("resp, err := m.Serve(ctx, \"%s\", \"%s\", req)", svc.GoName, m.GoName))
			g.P("if err != nil { return nil, err}")
			unmar := getUnmarshalPkg(g)
			g.P("output := &", output, "{}")
			g.P("err = ", unmar, "(resp, output)")
			g.P("if err != nil { return nil, err}")
			g.P("return output, nil")
			g.P("}")
			g.P()
		}
		g.P(fmt.Sprintf("func MakeMock%sServer(mock %s) %sServer {", svc.GoName, getMockServer(g), svc.GoName))
		g.P(fmt.Sprintf("return &%s {mock}", sName))
		g.P("}")
	}
}
